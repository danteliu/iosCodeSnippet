<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>dNSCopying01</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>/// 归档
/// - Parameter coder: &lt;#coder description#&gt;
- (void)encodeWithCoder:(NSCoder *)coder {
    unsigned int count = 0;
    //计算属性个数
    Ivar *ivars = class_copyIvarList([self class], &amp;count);

    for (NSInteger i = 0; i &lt; count; i++) {
        Ivar ivar = ivars[i];
        //获得属性名字
        const char *name = ivar_getName(ivar);
        NSString *key = [NSString stringWithUTF8String:name];

        if ([self valueForKey:key] != nil) {
            //kvc获得对象
            [coder encodeObject:[self valueForKey:key] forKey:key];
        }
    }

    free(ivars);
}

/// 解档
/// - Parameter coder: &lt;#coder description#&gt;
- (instancetype)initWithCoder:(NSCoder *)coder {
    self = [super init];

    if (self) {
        unsigned int count = 0;
        Ivar *ivars = class_copyIvarList([self class], &amp;count);

        for (NSInteger i = 0; i &lt; count; i++) {
            Ivar ivar = ivars[i];
            const char *name = ivar_getName(ivar);
            NSString *key = [NSString stringWithUTF8String:name];

            if ([coder containsValueForKey:key]) {
                //通过解档获得属性值
                id value = [coder decodeObjectForKey:key];
                //设置到成员变量身上
                [self setValue:value forKey:key];
            }
        }

        free(ivars);
    }

    return self;
}

- (nonnull id)copyWithZone:(nullable NSZone *)zone {
    id objCopy = [[[self class] allocWithZone:zone] init];

    unsigned int propertyCount = 0;
    // 1.获取属性列表
    objc_property_t *propertyArray = class_copyPropertyList([self class], &amp;propertyCount);

    for (int i = 0; i &lt; propertyCount; i++) {
        objc_property_t property = propertyArray[i];
        // 2.属性名字
        const char *propertyName = property_getName(property);
        NSString *key = [NSString stringWithUTF8String:propertyName];

        if ([self valueForKey:key] != nil) {
            // 3.通过属性名拿到属性值(kvc)
            id value = [self valueForKey:key];

            // 4.判断 值对象是否响应copyWithZone
            if ([value respondsToSelector:@selector(copyWithZone:)]) {
                //5. 设置属性值
                [objCopy setValue:[value copy] forKey:key];
            } else {
                [objCopy setValue:value forKey:key];
            }
        }
    }

    //6.手动释放
    free(propertyArray);
    return objCopy;
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>6E1833CA-EC37-4649-849B-969FEEF234B1</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>01 实现NSCopying 协议</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
